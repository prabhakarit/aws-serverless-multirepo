permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo
name: terraform runner classic-partner
# on:
#     push:
#         branches:
#             - master
on: 
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'     
        required: true
        default: 'dev'
        options: ['dev','prod']
        type: choice
      region:
        description: 'Region'     
        required: true
        default: 'eu-central-1'
        options: ['eu-central-1']
        type: choice
      module:
        description: 'Module'     
        required: true
        default: 'classic-partner'
        options: ['classic-partner']
        type: choice
      resource:
        description: 'Resource'     
        required: true
        default: 'dynamo-db'
        options: ['dynamo-db']
        type: choice
      type:
        description: 'Type of operation'     
        required: true
        default: 'mapping'
        options: ['mapping']
        type: choice

jobs:
  build:
      if: ${{ github.event.inputs.environment }} == 'dev' ||  ${{ github.event.inputs.environment }} == 'prod'
      runs-on: ubuntu-latest
      strategy:
            matrix:
                node-version: [16.x]
      steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          #role-to-assume: arn:aws:iam::622157788797:role/github_role
          role-to-assume: arn:aws:iam::539016438966:role/github_role
          role-duration-seconds: 900 # the ttl of the session, in seconds.
          aws-region: ${{ github.event.inputs.region }}
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.5
      - name: Terraform Plan and apply changes
        run: |
          echo "environment = ${{ github.event.inputs.environment }}"
          echo "branch = ${{ github.event.inputs.Branch }}"
          echo "module = ${{ github.event.inputs.module }}"
          echo "type = ${{ github.event.inputs.type }}"
          echo "resource = ${{ github.event.inputs.resource }}"
          cd Infrastructure
          cd ${{ github.event.inputs.module }}
          cd ${{ github.event.inputs.resource }}
          cp ./vars/${{ github.event.inputs.type }}/${{ github.event.inputs.environment }}/vars.tf .
          ls -lrt
          export TF_CLI_ARGS_plan="-compact-warnings"
          export TF_CLI_ARGS_apply="-compact-warnings"
          terraform init -reconfigure -backend-config=./vars/${{ github.event.inputs.type }}/${{ github.event.inputs.environment }}/backend.tf
          terraform validate
          terraform plan -input=false -no-color  
          terraform apply -auto-approve
